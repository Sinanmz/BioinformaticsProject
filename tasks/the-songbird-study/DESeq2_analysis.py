import subprocess
import pandas as pd
import os


def DESeq2_study_group(r_script_path, input_file_path, output_file_path, social_settings=[]):
    """
    Perform DESeq2 analysis on RNA-seq count data with study groups.

    This function executes DESeq2 analysis on RNA-seq count data provided in a CSV file,
    considering study groups and optionally filtering data based on specified social settings.

    Parameters:
    r_script_path (str): Path to the R script for DESeq2 analysis.
    input_file_path (str): Path to the input CSV file containing count data.
    output_file_path (str): Path to save the output CSV file with differential expression results.
    social_settings (list, optional): List of social settings to filter the data. Default is an empty list.

    Returns:
    None

    Raises:
    FileNotFoundError: If the input CSV file is not found.
    """

    # Check if the input CSV file exists
    if not os.path.exists(input_file_path):
        raise FileNotFoundError("Input CSV file not found at specified path.")

    # Filter data based on social settings if specified
    if len(social_settings) != 0:
        df = pd.read_csv(input_file_path)
        df = df[df['social_settting'].isin(social_settings)]
        df.to_csv('temp', index=False)
        input_file_path = 'temp'

    # Execute DESeq2 analysis R script
    command = ['Rscript', r_script_path, '0', input_file_path, output_file_path]
    result = subprocess.run(command, capture_output=True, text=True)

    # Clean up temporary file if social settings were filtered
    if len(social_settings) != 0:
        os.remove('temp')

    # Path to the summary file generated by DESeq2
    summary_file = output_file_path + ".summary"

    # Check if DESeq2 analysis was successful
    if result.returncode == 0:
        print("DESeq2 analysis completed successfully.")
        # Print summary output
        with open(summary_file, "r") as f:
            summary_output = f.read()
            print(summary_output)
    else:
        # Print error message if DESeq2 analysis failed
        print("DESeq2 analysis failed. Error message:", result.stderr)

    # Remove summary file if it exists
    if os.path.exists(summary_file):
        os.remove(summary_file)


def DESeq2_social_setting(r_script_path, input_file_path, output_file_path, base_setting, second_setting, study_groups='both'):
    """
    Perform DESeq2 analysis on RNA-seq count data with social settings.

    This function executes DESeq2 analysis on RNA-seq count data provided in a CSV file,
    considering social settings and optionally filtering data based on specified study groups.

    Parameters:
    r_script_path (str): Path to the R script for DESeq2 analysis.
    input_file_path (str): Path to the input CSV file containing count data.
    output_file_path (str): Path to save the output CSV file with differential expression results.
    base_setting (str): Base social setting for comparison.
    second_setting (str): Second social setting for comparison.
    study_groups (str, optional): Specify study groups to analyze. Default is 'both', which includes all both control and treatment groups.

    Returns:
    None

    Raises:
    FileNotFoundError: If the input CSV file is not found.
    """

    # Check if the input CSV file exists
    if not os.path.exists(input_file_path):
        raise FileNotFoundError("Input CSV file not found at specified path.")

    # Filter data based on study groups if specified
    if study_groups != 'both':
        df = pd.read_csv(input_file_path)
        df = df[df['study_group'].isin([study_groups])]
        df.to_csv('temp', index=False)
        input_file_path = 'temp'

    # Execute DESeq2 analysis R script
    command = ['Rscript', r_script_path, '1', input_file_path, output_file_path, base_setting, second_setting]
    result = subprocess.run(command, capture_output=True, text=True)

    # Clean up temporary file if study groups were filtered
    if study_groups != 'both':
        os.remove('temp')

    # Path to the summary file generated by DESeq2
    summary_file = output_file_path + ".summary"

    # Check if DESeq2 analysis was successful
    if result.returncode == 0:
        print("DESeq2 analysis completed successfully.")
        # Print summary output
        with open(summary_file, "r") as f:
            summary_output = f.read()
            print(summary_output)
    else:
        # Print error message if DESeq2 analysis failed
        print("DESeq2 analysis failed. Error message:", result.stderr)

    # Remove summary file if it exists
    if os.path.exists(summary_file):
        os.remove(summary_file)

